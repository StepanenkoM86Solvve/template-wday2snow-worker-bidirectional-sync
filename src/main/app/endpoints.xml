<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:wd-connector="http://www.mulesoft.org/schema/mule/wd-connector" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:servicenow="http://www.mulesoft.org/schema/mule/servicenow"
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/wd-connector http://www.mulesoft.org/schema/mule/wd-connector/current/mule-wd-connector.xsd
http://www.mulesoft.org/schema/mule/servicenow http://www.mulesoft.org/schema/mule/servicenow/current/mule-servicenow.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    
    <!-- This is the endpoints file. In this file you should declare your inbound and outbound endpoints in order to control the access to your integration -->

    <flow name="triggerSyncFromWorkdayFlow"  processingStrategy="synchronous" initialState="started">
		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="${poll.frequencyMillis}" startDelay="${poll.startDelayMillis}" />
			<watermark variable="lastQueryDateA" default-expression="${wday.watermark.default.expression}" />
            <processor-chain doc:name="Processor Chain">
            	<expression-component doc:name="Lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <logger message="Fetching Workday updates: #[flowVars.lastQueryDateA]" level="INFO" doc:name="Log 'Fetching Workday updates...'"/>
                <dw:transform-message doc:name="Create getWorkersRequest">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 urn:com.workday/bsvc
---
{
	ns0#Get_Workers_Request: {
		ns0#Request_Criteria: {
			ns0#Transaction_Log_Criteria_Data: {
				ns0#Transaction_Date_Range_Data: {
					ns0#Updated_From: flowVars.lastQueryDateA,
					ns0#Updated_Through: now - |PT6S|
				}
			},
			ns0#Exclude_Inactive_Workers: true,
			ns0#Exclude_Employees: false,
			ns0#Exclude_Contingent_Workers: false
		},
		ns0#Response_Group: {
			ns0#Include_Reference: true,
			ns0#Include_Personal_Information: true,
			ns0#Include_Organizations: true,
			ns0#Include_Transaction_Log_Data: true
		}
	}
}]]></dw:set-payload>
                </dw:transform-message>

                <wd-connector:invoke config-ref="Workday__Basic" type="Human_Resources||Get_Workers" doc:name="Fetch Workers from Workday"/>

                <dw:transform-message doc:name="GetWorkersResponseType to Map and update lastQueryDateA">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 urn:com.workday/bsvc
---
payload.ns0#Get_Workers_Response.ns0#Response_Data.*ns0#Worker map ((worker , indexOfWorker) -> {
	name: worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Name_Data.ns0#Legal_Name_Data.ns0#Name_Detail_Data.ns0#Formatted_Name,
	active : worker.ns0#Worker_Data.ns0#Employment_Data.ns0#Worker_Status_Data.ns0#Active,
	firstName : worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Name_Data.ns0#Preferred_Name_Data.ns0#Name_Detail_Data.ns0#First_Name,
	lastName : worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Name_Data.ns0#Preferred_Name_Data.ns0#Name_Detail_Data.ns0#Last_Name,
	middleName : worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Name_Data.ns0#Preferred_Name_Data.ns0#Name_Detail_Data.ns0#Middle_Name,
	email : worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Email_Address_Data.ns0#Email_Address,
	country : worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Address_Data[-1].ns0#Country_Reference.ns0#ID[2],
	employeeNumber : worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Name_Data.ns0#Preferred_Name_Data.ns0#Name_Detail_Data.ns0#First_Name ++ 
					 worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Name_Data.ns0#Preferred_Name_Data.ns0#Name_Detail_Data.ns0#Last_Name,
	homePhone : worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Phone_Data[-1].ns0#Phone_Number,
	"zip" : worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Address_Data[-1].ns0#Postal_Code,
	street : worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Address_Data[-1].ns0#Address_Line_Data[-1],
	city : worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Address_Data[-1].ns0#Municipality,
	state : worker.ns0#Worker_Data.ns0#Personal_Data.ns0#Contact_Data.ns0#Address_Data[-1].ns0#Country_Region_Reference.ns0#ID[-1],
	userName : (worker.ns0#Worker_Reference),
	LastModifiedOn : payload.ns0#Request_Criteria.ns0#Transaction_Log_Criteria_Data[0].ns0#Transaction_Date_Range_Data.ns0#Updated_Through,		
	lastEventType : worker.ns0#Worker_Data.ns0#Transaction_Log_Entry_Data.ns0#Transaction_Log_Entry.ns0#Transaction_Log_Reference.ns0#ID.@ns0#type,
	lastEventValue : worker.ns0#Worker_Data.ns0#Transaction_Log_Entry_Data.ns0#Transaction_Log_Entry.ns0#Transaction_Log_Reference.ns0#ID	
}) unless (payload.ns0#Get_Workers_Response.ns0#Response_Data is :null) otherwise []

]]></dw:set-payload>
                   <dw:set-variable variableName="lastQueryDateA"><![CDATA[%dw 1.0
%output application/java
%namespace ns0 urn:com.workday/bsvc
---
payload.ns0#Get_Workers_Response.ns0#Request_Criteria.ns0#Transaction_Log_Criteria_Data.ns0#Transaction_Date_Range_Data.ns0#Updated_Through]]></dw:set-variable>
                </dw:transform-message>


			</processor-chain>
		</poll>



        <choice doc:name="Filter empty result set">
            <when expression="payload.size() == 0">
                <expression-component doc:name="Release lock"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
            </when>
            <otherwise>
                <batch:execute name="syncBatchWorkday" doc:name="syncBatchWorkday"/>
            </otherwise>
        </choice>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>

	<flow name="triggerSyncFromServiceNowFlow"  processingStrategy="synchronous" initialState="started">
   		<poll doc:name="Poll">
   			<fixed-frequency-scheduler frequency="${poll.frequencyMillis}" startDelay="${poll.startDelayMillis}" />
   			<watermark variable="lastQueryDateB" default-expression="${snow.watermark.default.expression}" selector="MAX" selector-expression="#[payload.sys_updated_on]"/>
            <processor-chain doc:name="Processor Chain">
            	<expression-component doc:name="Lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <logger message="Fetching ServiceNow updates: #[flowVars.lastQueryDateB] GMT" level="INFO" doc:name="Log 'Fetching ServiceNow updates...'"/>
                <dw:transform-message doc:name="Prepare Users request">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/xml
%namespace ns0 http://www.service-now.com/sys_user
---
{
	ns0#getRecords: {
		ns0#"sys_updated_on": (">" ++ flowVars.lastQueryDateB),
		ns0#"sys_updated_by": "<>" ++ p('snow.integration.user.id')
	}
}]]></dw:set-payload>
                </dw:transform-message>
                <servicenow:invoke config-ref="ServiceNow" type="sys_user||getRecords" doc:name="Fetch Users from ServiceNow"/>
                <dw:transform-message doc:name="Transform GetRecordsResponse To Collection of Maps">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%namespace ns0 http://www.service-now.com/sys_user
---
payload.getRecordsResponse.*getRecordsResult when (payload.getRecordsResponse != '' and payload.getRecordsResponse != null) otherwise []
]]></dw:set-payload>
                </dw:transform-message>


			</processor-chain>
		</poll>
        <choice doc:name="Filter empty result set">
            <when expression="#[payload.size() == 0]">
                <expression-component doc:name="Release lock"><![CDATA[#[app.registry['PollSynchronizer'].unlock()]]]></expression-component>
            </when>
            <otherwise>
                <batch:execute name="syncBatchServiceNow" doc:name="syncBatchServiceNow"/>
            </otherwise>
        </choice>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="Reference Exception Strategy"/>
    </flow>
</mule>
